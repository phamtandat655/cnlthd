import { CanActivate, ExecutionContext,
  Injectable, UnauthorizedException, } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { jwtConstants } from './auth.constants';
import { Request } from 'express';
import { Reflector } from '@nestjs/core';
import { IS_PUBLIC_KEY } from './decorators/public.decorator';

@Injectable()
export class AuthGuard implements CanActivate { // l·ªõp guard ki·ªÉm tra quy·ªÅn truy c·∫≠p,
                                                //  tri·ªÉn khai interface CanActivate
  constructor(private jwtService: JwtService, private reflector: Reflector) {}

  // H√†m canActivate ki·ªÉm tra xem request c√≥ ƒë∆∞·ª£c ph√©p truy c·∫≠p route hay kh√¥ng
  async canActivate(context: ExecutionContext): Promise<boolean> { 
    // L·∫•y th√¥ng tin t·ª´ metadata ƒë·ªÉ ki·ªÉm tra route c√≥ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† public hay kh√¥ng
    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);
    // N·∫øu route l√† public, cho ph√©p truy c·∫≠p m√† kh√¥ng c·∫ßn ki·ªÉm tra token
    if (isPublic) {
      // üí° See this condition
      return true;
    }

    const request = context.switchToHttp().getRequest(); // l·∫•y request t·ª´ context HTTP
    const token = this.extractTokenFromHeader(request);  // Tr√≠ch xu·∫•t token t·ª´ header c·ªßa request
    if (!token) {
      throw new UnauthorizedException();
    }
    try {
      // S·ª≠ d·ª•ng secret key t·ª´ auth.constants ƒë·ªÉ gi·∫£i m√£ token
      const payload = await this.jwtService.verifyAsync(token, {
        secret: jwtConstants.secret,
      });
      
       // G√°n payload (d·ªØ li·ªáu trong token) v√†o request ƒë·ªÉ s·ª≠ d·ª•ng trong route handlers
      request['user'] = payload;
    } catch {
      throw new UnauthorizedException();
    }
    return true;
  }

  private extractTokenFromHeader(request: Request): string | undefined {
    // T√°ch header Authorization th√†nh 2 ph·∫ßn: type v√† token (v√≠ d·ª•: "Bearer abcxyz")
    const [type, token] = request.headers.authorization?.split(' ') ?? [];
    // Ki·ªÉm tra n·∫øu type l√† 'Bearer' th√¨ tr·∫£ v·ªÅ token, n·∫øu kh√¥ng tr·∫£ v·ªÅ undefined
    return type === 'Bearer' ? token : undefined;
  }
}
